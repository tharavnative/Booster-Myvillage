<script>
    {% capture locales %}
    {
    {% if settings.multilanguage %}
        {% for locale in shop.enabled_locales %}
        "{{locale.iso_code | downcase}}": {
        primary: {{locale.primary}},
        url: "{{locale.root_url}}"
        },
        {% endfor %}
    {% endif %}
    }
    {% endcapture %}
    {% capture currencies %}
    [
    {% unless settings.shopCurrency == 'none' %}
    {% if settings.shopCurrency == 'convert' %}
        {% assign currencyArr = settings.enabledCurrencies | upcase | replace: ' ', '' | split: ',' %}
        {% unless currencyArr contains shop.currency.iso_code %}
        "{{shop.currency.iso_code | upcase}}",
        {% endunless %}
        {% for currency in currencyArr %}
        "{{currency | strip}}",
        {% endfor %}
    {% else %}
        {% for currency in shop.enabled_currencies %}
            "{{currency.iso_code | upcase}}",
        {% endfor %}
    {% endif %}
    {% endunless %}
    ]
    {% endcapture %}

    const bstri18n = {
    locales: {{locales}},
    currencies: {{currencies}},
    currency_mode: "{{settings.shopCurrency}}",
    currency_format: "{{shop.money_with_currency_format}}",
    all_products_route: "{{routes.all_products_collection_url}}"
    }

    {% capture emptySearch %}
    {% for item in collections[settings.emptySearch].products limit: 5 %}
        <div class="col-12 col-md-1-5">
        {% render 'product-card-search', product: item, dsize: '1-5' %}
        </div>
    {% endfor %}
    {% endcapture %}
    const emptySearch = `{{emptySearch}}`;
    {% render 'shop-info' %}
    const _settings = {{settings | json}};
    const _bstrLocale = {
    buttons: {
        sold_out: `{{'general.buttons.sold_out' | t | strip}}`,
        select: `{{'general.buttons.add_to_cart_selection' | t | strip}}`,
        adding: `{{'general.buttons.add_to_cart_loading' | t | strip}}`,
        back_to_shop: `{{'navigation.buttons.back_to_shop' | t | strip}}`
    },
    tags: {
        off: `{{'general.tags.off'|t|strip}}`,
        sale: `{{'general.tags.sale'|t|strip}}`
    },
    recentlyBought: {
        purchased: `{{'recently_bought.purchased' | t | strip}}`,
        ago: `{{'recently_bought.ago' | t | strip}}`,
        someone: `{{'recently_bought.someone' | t | strip}}`
    }
    }
</script>

<template id="productCardTemplate">
    {% render 'product-card-template' %}
</template>

<script>
{% comment %} Load designMode Javascript {% endcomment %}
{% comment %} setTimeout to deprioritize in the main thread and event loop {% endcomment %}
setTimeout(
    ()=>{
        if (!Shopify.designMode) return
        const script = document.createElement("script")
        script.setAttribute("async", "true")
        script.setAttribute("defer", "true")
        script.setAttribute("type", "text/javascript")
        script.src = "{{ 'designMode.js' | asset_url }}"
        document.body.append(script)
    }, 
    0
)
</script>

<script>
{% comment %} Load a smooth scroll polyfill (iOS devices) {% endcomment %}
{% comment %} setTimeout to deprioritize in the main thread and event loop {% endcomment %}
setTimeout(
    () => {
        if('scrollBehavior' in document.documentElement.style) return
        const script = document.createElement("script")
        script.setAttribute("async", "true")
        script.setAttribute("defer", "true")
        script.setAttribute("type", "text/javascript")
        script.src = "{{ 'smooth-scroll.poly.js' | asset_url }}"
        document.body.append(script)
    }, 
    0
)
</script>